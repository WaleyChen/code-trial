.container
  %audio.hidden{:controls => "controls", :id => "recording"}
    %source{:src => @interview.voice, :type => "audio/mpeg"}
  .row
    .span6
      %textarea{ autofocus:"true", id:'codearea', rows:10, cols:20, class: 'poll-replay-target' }
        = "Click the button to see what the interviewee wrote"
      %a{ :id => "play-stop-btn", :class => "btn btn-inverse btn-small", style: 'float: left; display: inline-block' }
        %i.icon-white.icon-play{style: 'line-height: 200px'}
      #slider{style: 'float:right; width: 85%; display: inline; margin-top: 13px; box-shadow: 0px 2px 12px rgba(7,7,7, 0.2)'}
    .span6
      %h3 Transcription
      .well
        = @interview.transcription || "No transcription is available for this interview."

  .hidden
    %textarea#code_changes
      = @interview.code_changes
  .hidden
    %textarea#code_timestamps
      = @interview.code_timestamps


:coffeescript
$(document).ready ->
  console.log($('#codearea').val())
  cm = CodeMirror.fromTextArea(
    $('#codearea').get(0),
    {
      theme: "monokai"
      mode: "ruby"
      readOnly: true
    })

  polling_interval = 3

  log = $('#code_changes').text()
  log = $.parseJSON(log)
  times = $('#code_timestamps').text()
  times = $.parseJSON(times)

  log.shift()
  times.shift()

  offset = times[0]

  `for (var i=0; i<times.length; i++) {
    times[i] = times[i] - offset
  }`
  console.log(log)
  console.log(times)

  counter = 0
  idx = 0
  codePlaying = null
  window.startCodeReplay = ->
    $('.poll-replay-target').val('')
    cm.setValue(log[idx]) if log[idx]
    replay = ->
      console.log("code replay")
      if (times.length > 0 && counter == times[idx])
        replay_text = log[idx]
        cm.setValue(log[idx])
        idx++
        $('.poll-replay-target').focus()
      counter++
    codePlaying = setInterval(replay, polling_interval)

  window.stopCodeReplay = ->
    clearInterval(codePlaying)

  window.setCodeReplayTime = (time) ->
    counter = Math.floor(time/3)
    idx = nextIdx(counter)
    if idx is (times.length-1)
      cm.setValue(log[idx])
    else
      cm.setValue(log[idx-1])

  nextIdx = (cnt) ->
    i = 0
    for c in times
      if c <= cnt
        i++
      else
        return i
    return times.length-1
